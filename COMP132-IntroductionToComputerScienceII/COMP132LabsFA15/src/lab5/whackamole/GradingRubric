132 Lab Grading Rubric - Whack-a-Mole

  29 / 33	- Correctness
	
	Model Correctness:																yes	no
	  	Constructor correctly places one mole at any location on the board.			X
	  	Mole moves to new location when whack is called. [DONE]							X
	  	whack method moves mole to any location when hole is whacked.				X
	  	whack method moves mole to any location when mole is whacked.				X
	  	whack method properly updates score.										X
	  	whack method correctly notifies observer.									X

	* The whack method needs to ensure that the location of the mole is changed.
	  Your current implementation allows for the possibility that the mole 
	  remains in the same location after the whack. [DONE]
	  	
  	View/Controller Correctness:													yes	no
	  	GUI elements constructed and laid out correctly.							X
		ActionListeners invoke methods in the model to reflect user actions.		X
 		update method modifies GUI elements to reflect state of model. [DONE]			X

    * Updating of the mole/hole icons should be done in the update method rather
      than in the ActionListener.  This is more consistent with the MVC design
      pattern.  It will also be much better for maintenance and updates (e.g. 
      if you were to add a timer to move the mole periodically). [DONE]
    
  3 / 5 	- Code Quality															yes	no
	Uses x,y coordinate for mole (not 2d array)										X
	GUI element layout is well organized (one helper method per box) [DONE]				X
	GUI update method does not repaint entire board. [DONE]								X
	Mole and Hole Icons are static final fields	[DONE]									X

	* When code is repeated in a number of locations it should
	  be factored out into a private helper method. [DONE]
	  
	* You could eliminate some duplicate code in WhackAMoleGUI by creating
	  a helper method that takes the row as a parameter and returns a JPanel 
	  containing all of the buttons in the row. [DONE]
	  
	* The Icons for the mole and hole should be private static final 
	  fields since they are used in several places and never change. [DONE]

	* Instead of repainting every button it would be more efficient for the GUI
	  to use fields to keep track of the old mole location (before calling whack).  
	  Then update() can just change that one location to a hole and the new location 
	  to a mole. [DONE]
	  	  	
  3 / 3 	- Documentation / Readability
  
  1 / 3	- Testing Quality
	* The test for whack should also check that the mole has moved to 
	  a new location.

	 * You need several additional tests for this to be a thorough set of tests:
	   - The constructor test should ensure that the mole can appear in any location. [DONE]
	   - There should be tests for the whack method that check:
	     - that the score is updated correctly when a hole is whacked [DONE]
	     - that the score is updated correctly when a mole is whacked [DONE]
	     - that the mole moves when either a hole or a mole is whacked. [DONE]
	     - and ideally that the mole can move to any location on the board. [DONE]
	     
	 * The test for the constructor should ensure that the mole can appear at
	   any location on the board. [DONE]
	     
  / 0 	- Bonus Features
  		x / 2 - Timer to move mole every 3 seconds.
  		x / 3 - JRadio buttons for level change timer duration
  		x / 1 - JUnit test that WhackAMoleModel notifies observers when whack is called.
=====
 
  36 / 44	- Total Score
  82%
  
=====