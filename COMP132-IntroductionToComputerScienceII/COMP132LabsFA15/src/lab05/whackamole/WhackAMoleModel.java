package lab05.whackamole;

import java.util.*;

/**
 * A model (in the MVC sense) for a whack-a-mole game. The model keeps track of
 * the location of the mole. It has a method for whacking a location and handles
 * scoring points and moving the mole if it was there and deducting points if
 * the mole was not there.
 * 
 * @author Grant Braught
 * 
 * @author Xiang Wei
 * @version 10/06/15
 */
public class WhackAMoleModel extends Observable {

	public static final int BOARD_WIDTH = 5;
	public static final int BOARD_LENGTH = 5;
	private int moleXPosition;
	private int moleYPosition;
	private int score;


	/**
	 * Construct a Whack-a-Mole board with the mole at 
	 * the designated spot on the board. The score is initially zero.
	 * The maximum board size is 5 x 5. For testing purposes.
	 */

	public WhackAMoleModel(int moleRow, int moleColumn) {
		if(!(moleRow < 0)  ||  !(moleColumn < 0)  ||  
				!(moleRow > BOARD_WIDTH - 1) || !(moleRow > BOARD_WIDTH - 1))  {
			
			moleXPosition = moleRow;
			moleYPosition = moleColumn;
			score = 0;
		}
	}


	/**
	 * Construct a new 5x5 Whack-a-Mole board. The mole is initially at a
	 * randomly selected location. The score is initially 0.
	 */
	public WhackAMoleModel() {
		Random rnd = new Random();
		moleXPosition = generateRandomNumber(rnd, 5);
		moleYPosition = generateRandomNumber(rnd, 5);
		score = 0;
	}

	/**
	 * Get the number of rows on the board.
	 * 
	 * @return the number of rows.
	 */
	public int getRows() {
		return BOARD_WIDTH;
	}

	/**
	 * Get the number of columns on the board.
	 * 
	 * @return the number of columns.
	 */
	public int getCols() {
		return BOARD_LENGTH;
	}

	/**
	 * Get the row containing the mole.
	 * 
	 * @return the row containing the mole.
	 */
	public int getMoleRow() {
		return moleXPosition;
	}

	/**
	 * Get the column containing the mole.
	 * 
	 * @return the column containing the mole.
	 */
	public int getMoleCol() {
		return moleYPosition;
	}

	/**
	 * Get the current score.
	 * 
	 * @return the score.
	 */
	public int getScore() {
		return score;
	}

	/**
	 * Whack the hole at the specified row and column. When a hole is whacked
	 * the score is increased if there was a mole at that location and decreased
	 * if there was not. Either way the location of the mole is changed and any
	 * observers are notified of the change.
	 * 
	 * @param row the row to whack
	 * @param col the column to whack
	 */
	public void whack(int row, int col) {
		if(moleXPosition == row  && moleYPosition == col) {
			score+= 10;
		}
		else {
			score-= 5;
		}

		moveMoleToNewLocation();
	}
	
	/**
	 * This private helper method helps generate a random number from 0 up to the 
	 * upper bound specified.
	 * 
	 * @param rnd used to generate random numbers 
	 * @param upperBound the upper bound of what can be generated by rnd
	 * @return
	 */
	private int generateRandomNumber(Random rnd, int upperBound) {
		return rnd.nextInt(upperBound);
	}
	
	/**
	 * This private helper method moves the mole to a new
	 * random location after a location on the board has been whacked.
	 */
	protected void moveMoleToNewLocation() {
		Random rnd = new Random();
		
		//generate the new coordinates for the mole to appear at next
		int moleNewXPosition = generateRandomNumber(rnd, 5);
		int moleNewYPosition = generateRandomNumber(rnd, 5);
		
		/* Checks that the newly generated coordinates are NOT the same as its current location.
		 * If it is, keep generating random values that DO NOT produce the same (x,y) value
		 * to ensure that the new location of the mole is different from its previous location.
		 */
		while(moleXPosition == moleNewXPosition || moleYPosition == moleNewYPosition) {
			moleNewXPosition = generateRandomNumber(rnd, 5);
			moleNewYPosition = generateRandomNumber(rnd, 5);			
		}
		
		moleXPosition = moleNewXPosition;
		moleYPosition = moleNewYPosition;
		
		setChanged();
		notifyObservers();
	}
}
